## tasks/public-key.yml
#- name: Set authorized key taken from file
#  ansible.posix.authorized_key:
#    user: "{{ my_user }}"
#    state: present
#    key: "{{ lookup('file', ssh_key_file) }}"
#    become: true  

# roles/harden/tasks/public-key.yml

#- name: Copy public key to harden-server2
#  ansible.builtin.copy:
#    src: "{{ ssh_key_file }}" 
#    dest: "/tmp/id_rsa.pub"  
#    owner: "{{ my_user }}"
#    mode: '0644'
#  delegate_to: localhost  
#
#- name: Set authorized key on harden-server2
#  ansible.posix.authorized_key:
#    user: "{{ my_user }}"
#    state: present
#    key: "{{ lookup('file', '/tmp/id_rsa.pub') }}"  
#  become: true
#
#- name: Remove temporary public key file from harden-server2
#  ansible.builtin.file:
#    path: "/tmp/id_rsa.pub"
#    state: absent
#  become: true

#- name: Generate SSH key pair
#  openssh_keypair:
#    path: /{{ ansible_user }}/.ssh/id_rsa
#    type: rsa
#    size: 2048
#    state: present
#  register: ssh_keypair
#
#- name: Add public key to authorized_keys
#  authorized_key:
#    user: "{{ ansible_user }}"
#    key: "{{ ssh_keypair.public_key }}"
#    state: present

- name: Check if SSH key pair exists
  stat:
    path: /home/{{ lookup('env', 'USER')  }}/.ssh/id_rsa
  register: ssh_key_exists
  delegate_to: localhost

- name: Generate SSH key pair on control node (if not exists)
  delegate_to: localhost
  command: ssh-keygen -t rsa -b 2048 -f /home/{{ lookup('env', 'USER')  }}/.ssh/id_rsa -N ''
  when: not ssh_key_exists.stat.exists

- name: Read the generated public key
  delegate_to: localhost
  slurp:
    src: /home/{{ lookup('env', 'USER')  }}/.ssh/id_rsa.pub
  register: public_key
  when: ssh_key_exists.stat.exists or ssh_key_exists.changed

- name: Add public key to remote authorized_keys
  authorized_key:
    user: "{{ ansible_user }}"
    key: "{{ public_key.content | b64decode }}"
    state: present

